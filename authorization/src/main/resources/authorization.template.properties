##
# authorization 验证相关配置
##
## 内置登录验证器(传递beanName 纳入spring ioc容器管理) 默认(内置le sso 登录)(必须配置)
password-validator.beanName = passwordValidator

# 单位分钟 (默认 7天)(可选配置)
access-token.expires =

# 单位分钟 默认(10分钟)(可选配置)
authorization-code.expires =

# 单位分钟 默认(30天)(可选配置)
refresh-token.expires =

# 防止命名冲突 token的key的前缀 (默认为空)(可选配置)
token.key.prefix =

# 防止命名冲突 token的key的后缀(可选配置)
access-token.key.suffix = _ACCESS_TOKEN

# 防止命名冲突 token的key的后缀(可选配置)
authorization-code.key.suffix = _AUTHORIZATION_CODE

# 防止命名冲突 token的key的后缀(可选配置)
refresh-token.key.suffix = _REFRESH_TOKEN

# access_token 存放的redis数据库(可选配置)
access-token.redis.database = 0

# authorization.code 存放的redis数据库(可选配置)
authorization-code.redis.database = 0

# refresh.token 存放的redis数据库(可选配置)
refresh-token.redis.database = 0
# (可选配置)
cookie.access-token.name = access_token
# (可选配置)
cookie.username.name = username

# 登录请求request 中 username 的parameter name (可选配置)
request.authorize.param.username = username

##
# tokenProvider beanName
# 如果你想使用自己的tokenProvider 请将tokenProvider.beanName的值更改 (可选配置)
# 默认是 RedisTokenProvider实现
##
# token.provider.beanName = myProvider

## 配置相关request路径 (必须配置)
# 登录
request.authorize.path = /authorize
# 登出
request.logout.path = /logout
# 通过refreshToken获取新的token
request.refresh.token.path = /refresh